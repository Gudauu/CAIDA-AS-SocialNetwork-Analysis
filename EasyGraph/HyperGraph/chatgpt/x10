

def toint(hyperedge_list):
    return np.array([h.astype('int') for h in hyperedge_list])


def random_walk(args, num, hyperedge_list):
    '''
    Learn embeddings by optimizing the Skipgram objective using SGD.
    '''
    # p, q = 1, 1
    # num_walks, walk_length, window_size = 10, 80, 10
    hyperedge_list = toint(hyperedge_list)
    p, q = args.p, args.q
    num_walks, walk_length, window_size = args.num_walks, args.walk_length, args.window_size
    # emb_save_path = '../embs/{}/p{}_q{}_r{}_l{}_k{}_i{}.embs'.format(args.data, p, q, num_walks, walk_length, window_size, iteration)
    if not os.path.exists("../walks"):
        os.mkdir("../walks")
        
    if not os.path.exists("../walks/{}/".format(args.data)):
        os.mkdir("../walks/{}/".format(args.data))
    walks_save_path = '../walks/{}/p{}_q{}_r{}_l{}_walks.txt'.format(
        args.data, p, q, num_walks, walk_length)
    start = time.time()

    if not args.TRY and os.path.exists(walks_save_path):
        return walks_save_path
    else:
        nx_G = read_graph(num.numpy(), hyperedge_list)
        G = Graph(nx_G, p, q)
        preprocess_transition_probs(G)
        walks = simulate_walks(G, num_walks, walk_length)
        walks = np.array(walks)

        print(walks.shape)
        np.savetxt(walks_save_path, walks, fmt="%d", delimiter=" ")
        #np.save(walks_save_path, walks)

        print("RandomWalk running time: %.2lf" % (time.time() - start))

        return walks_save_path
7. "torchsummary.py"
import torch
import torch.nn as nn
from torch.autograd import Variable

from collections import OrderedDict
import numpy as np


def summary(model, input_size, batch_size=-1, device="cuda"):

    def register_hook(module):

        def hook(module, input, output):
            class_name = str(module.__class__).split(".")[-1].split("'")[0]
            module_idx = len(summary)

            m_key = "%s-%i" % (class_name, module_idx + 1)
            summary[m_key] = OrderedDict()
            summary[m_key]["input_shape"] = list(input[0].size())
            summary[m_key]["input_shape"][0] = batch_size
            if isinstance(output, (list, tuple)):
                summary[m_key]["output_shape"] = [
                    [-1] + list(o.size())[1:] for o in output
                ]
            else:
                summary[m_key]["output_shape"] = list(output.size())
                summary[m_key]["output_shape"][0] = batch_size

            params = 0
            if hasattr(module, "weight") and hasattr(module.weight, "size"):
                params += torch.prod(torch.LongTensor(list(module.weight.size())))
                summary[m_key]["trainable"] = module.weight.requires_grad

            if hasattr(module, "bias") and hasattr(module.bias, "size"):
                params += torch.prod(torch.LongTensor(list(module.bias.size())))
            summary[m_key]["nb_params"] = params

        if (
            not isinstance(module, nn.Sequential)
            and not isinstance(module, nn.ModuleList)
            and not (module == model)
        ):
            hooks.append(module.register_forward_hook(hook))

    device = device.lower()
    assert device in [
        "cuda",
        "cpu",
    ], "Input device is not valid, please specify 'cuda' or 'cpu'"

    if device == "cuda" and torch.cuda.is_available():
        dtype = torch.cuda.FloatTensor
    else:
        dtype = torch.FloatTensor

    # multiple inputs to the network
    if isinstance(input_size, tuple):
        input_size = [input_size]

    # batch_size of 2 for batchnorm
    x = [torch.rand(2, *in_size).type(dtype) for in_size in input_size]
    # print(type(x[0]))

    # create properties
    summary = OrderedDict()
    hooks = []

    # register hook
    model.apply(register_hook)

    # make a forward pass
    # print(x.shape)
    model(*x)

    # remove these hooks
    for h in hooks:
        h.remove()

    print("----------------------------------------------------------------")
    line_new = "{:>20}  {:>25} {:>15}".format("Layer (type)", "Output Shape", "Param #")
    print(line_new)
    print("================================================================")
    total_params = 0
    total_output = 0
    trainable_params = 0
    for layer in summary:
        # input_shape, output_shape, trainable, nb_params
        line_new = "{:>20}  {:>25} {:>15}".format(
            layer,
            str(summary[layer]["output_shape"]),
            "{0:,}".format(summary[layer]["nb_params"]),
        )
        total_params += summary[layer]["nb_params"]
        try:
            total_output += np.prod(summary[layer]["output_shape"])
        except:
            print("error", layer)
        if "trainable" in summary[layer]:
            if summary[layer]["trainable"] == True:
                trainable_params += summary[layer]["nb_params"]
        print(line_new)

    # assume 4 bytes/number (float on cuda).
    total_input_size = abs(np.prod(input_size) * batch_size * 4. / (1024 ** 2.))
    total_output_size = abs(2. * total_output * 4. / (1024 ** 2.))  # x2 for gradients
    total_params_size = abs(total_params.numpy() * 4. / (1024 ** 2.))
    total_size = total_params_size + total_output_size + total_input_size

    print("================================================================")
    print("Total params: {0:,}".format(total_params))
    print("Trainable params: {0:,}".format(trainable_params))
    print("Non-trainable params: {0:,}".format(total_params - trainable_params))
    print("----------------------------------------------------------------")
    print("Input size (MB): %0.2f" % total_input_size)
    print("Forward/backward pass size (MB): %0.2f" % total_output_size)
    print("Params size (MB): %0.2f" % total_params_size)
    print("Estimated Total Size (MB): %0.2f" % total_size)
    print("----------------------------------------------------------------")
    # return summary
8. "utils.py"
import numpy as np
import torch
from tqdm import tqdm, trange
from sklearn.metrics import average_precision_score, precision_score, recall_score, f1_score
from sklearn.metrics import roc_auc_score, accuracy_score, matthews_corrcoef
from concurrent.futures import as_completed, ProcessPoolExecutor


def add_padding_idx(vec):
    if len(vec.shape) == 1:
        return np.asarray([np.sort(np.asarray(v) + 1).astype('int')
                         for v in tqdm(vec)])
    else:
        vec = np.asarray(vec) + 1
        vec = np.sort(vec, axis=-1)
        return vec.astype('int')


def np2tensor_hyper(vec, dtype):
    vec = np.asarray(vec)
    if len(vec.shape) == 1:
        return [torch.as_tensor(v, dtype=dtype) for v in vec]
    else:
        return torch.as_tensor(vec, dtype = dtype)


def walkpath2str(walk):
    return [list(map(str, w)) for w in tqdm(walk)]


def roc_auc_cuda(y_true, y_pred):
    try:
        y_true = y_true.cpu().detach().numpy().reshape((-1, 1))
        y_pred = y_pred.cpu().detach().numpy().reshape((-1, 1))
        return roc_auc_score(
            y_true, y_pred), average_precision_score(
            y_true, y_pred)
    except BaseException:
        return 0.0, 0.0


def accuracy(output, target):
    pred = output >= 0.5
    truth = target >= 0.5
    acc = torch.sum(pred.eq(truth))
    acc = float(acc) * 1.0 / (truth.shape[0] * 1.0)
    return acc


def build_hash(data):
    dict1 = set()

    for datum in data:
        # We need sort here to make sure the order is right
        datum.sort()
        dict1.add(tuple(datum))
    del data
    return dict1


def build_hash2(data):
    dict2 = set()
    for datum in tqdm(data):
        for x in datum:
            for y in datum:
                if x != y:
                    dict2.add((x, y))
    return dict2


def build_hash3(data):
    dict2 = set()
    for datum in tqdm(data):
        for i in range(3):
            temp = np.copy(datum).astype('int')
            temp[i] = 0
            dict2.add(tuple(temp))

    return dict2


def parallel_build_hash(data, func, args, num, initial = None):
    import multiprocessing
    cpu_num = multiprocessing.cpu_count()
    data = np.array_split(data, cpu_num * 3)
    dict1 = initial.copy()
    pool = ProcessPoolExecutor(max_workers=cpu_num)
    process_list = []

    if func == 'build_hash':
        func = build_hash
    if func == 'build_hash2':
        func = build_hash2
    if func == 'build_hash3':
        func = build_hash3

    for datum in data:
        process_list.append(pool.submit(func, datum))

    for p in as_completed(process_list):
        a = p.result()
        dict1.update(a)

    pool.shutdown(wait=True)
	
    # if args.data in ['schic','ramani']:
    # 	print (num[0])
    # 	new_list_of_set = [set() for i in range(int(num[0]+1))]
    # 	for s in dict1:
    # 		try:
    # 			new_list_of_set[s[0]].add(s)
    # 		except:
    # 			print (s)
    # 			raise EOFError
    # 	dict1 = new_list_of_set
    return dict1

def generate_negative_edge(x, length):
    pos = np.random.choice(len(pos_edges), length)
    pos = pos_edges[pos]
    negative = []

    temp_num_list = np.array([0] + list(num_list))

    id_choices = np.array([[0, 1], [1, 2], [0, 2]])
    id = np.random.choice([0, 1, 2], length * neg_num, replace=True)
    id = id_choices[id]

    start_1 = temp_num_list[id[:, 0]]
    end_1 = temp_num_list[id[:, 0] + 1]

    start_2 = temp_num_list[id[:, 1]]
    end_2 = temp_num_list[id[:, 1] + 1]

    if len(num_list) == 3:
        for i in range(neg_num * length):
            temp = [
                np.random.randint(
